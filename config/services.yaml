# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    SLACK_URL_INVITE: 'https://slack.com/api/admin.users.invite'
    SLACK_TOKEN: '%env(SLACK_TOKEN)%'
    SLACK_TEAMID: '%env(SLACK_TEAMID)%'
    google_recaptcha_site_key: '%env(GOOGLE_RECAPTCHA_SITE_KEY)%'
    meetup_events_url: '%env(MEETUP_EVENTS_URL)%'
    app.path.sponsor_images: /uploads/sponsors
    app.path.meetup_images: /uploads/meetups

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    Jaybizzle\CrawlerDetect\CrawlerDetect:

    GuzzleHttp\Client:

    App\Command\PhpmxSlackSyncCommand:
        tags:
            - { name: 'console.command', command: 'phpmx:slack:sync' }

    App\Service\GetLatestMeetupEventFromCrawler:
        public: true
        class: App\Service\GetLatestMeetupEventFromCrawler
        arguments:
            - '@App\Service\CrawlNode'
            - '%meetup_events_url%'

    App\Contracts\GetLastMeetupEventInterface: '@App\Service\GetLatestMeetupEventFromCrawler'

    App\EventListener\SendLoginEmail:
        tags:
            - { name: doctrine.event_subscriber, event: postPersist }

    App\EventListener\SendContactEmail:
        tags:
            - { name: doctrine.event_subscriber, event: postPersist }

    snc_second_level_cache:
        class: Symfony\Component\Cache\DoctrineProvider
        public: false
        arguments:
            - '@doctrine.second_level_cache_pool'

    app.redis_provider:
        class: \Redis
        factory: ['Symfony\Component\Cache\Adapter\RedisAdapter', 'createConnection']
        arguments:
            - '%env(REDIS_URL)%'
            - { retry_interval: 2, timeout: 10 }

    DMS\Service\Meetup\MeetupKeyAuthClient:
        factory: ['DMS\Service\Meetup\MeetupKeyAuthClient', 'factory']
        arguments:
            -
                key: '%env(MEETUP_KEY)%'
    Gravatar\Gravatar:
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
